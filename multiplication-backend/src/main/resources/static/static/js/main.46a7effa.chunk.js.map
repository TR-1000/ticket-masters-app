{"version":3,"sources":["ApiClient.js","ChallengeComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","answer","console","log","POST_RESULT","method","headers","body","JSON","stringify","username","factor_a","factor_b","ChallengeComponent","props","state","handleSubmitResult","bind","handleChange","challenge","then","res","ok","json","setState","updateMessage","e","name","target","this","value","preventDefault","sendAnswer","correct","m","message","onSubmit","type","maxLength","onChange","min","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAAMA,E,8FAKJ,WACE,OAAOC,MAAMD,EAAUE,WAAaF,EAAUG,iB,wBAGhD,SAAkBC,EAAcC,EAAWC,EAAUC,GAGnD,OAFAC,QAAQC,IAAIL,GACZI,QAAQC,IAAIF,GACLN,MAAOD,EAAUE,WAAaF,EAAUU,YAAa,CAC1DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBACfC,KAAMC,KAAKC,UACR,CACEC,SAAUZ,EACVa,SAAUZ,EACVa,SAAUZ,EACVC,OAAQA,U,KArBhBP,EACGE,WAAa,wBADhBF,EAEGG,cAAgB,qBAFnBH,EAGGU,YAAc,YAyBRV,Q,OC+DAmB,E,kDAvFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXhB,EAAE,GACFC,EAAE,GACFU,SAAU,GACVT,OAAQ,GAEV,EAAKe,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,E,qDAYnB,WAA2B,IAAD,OACxBvB,EAAUyB,YAAYC,MACpB,SAAAC,GACKA,EAAIC,GACLD,EAAIE,OAAOH,MAAK,SAAAG,GACd,EAAKC,SAAS,CACZzB,EAAGwB,EAAKZ,SACRX,EAAGuB,EAAKX,cAIZ,EAAKa,cAAc,+B,0BAO7B,SAAaC,GACX,IAAMC,EAAOD,EAAEE,OAAOD,KACtBE,KAAKL,SAAL,eACGG,EAAOD,EAAEE,OAAOE,U,gCAIrB,SAAmBJ,GAAI,IAAD,OACpBA,EAAEK,iBACFrC,EAAUsC,WAAWH,KAAKd,MAAML,SAAUmB,KAAKd,MAAMhB,EAAG8B,KAAKd,MAAMf,EAAG6B,KAAKd,MAAMd,QAC9EmB,MAAK,SAAAC,GAEAA,EAAIC,GACND,EAAIE,OAAOH,MAAK,SAAAG,GACVA,EAAKU,QACP,EAAKR,cAAL,qCAAiD,EAAKV,MAAML,SAA5D,8BAGA,EAAKe,cAAc,0CAIvB,EAAKA,cAAc,6C,2BAK3B,SAAcS,GACZL,KAAKL,SAAS,CACZW,QAASD,M,oBAIb,WACE,OACE,gCACE,gCACE,uDACA,mCAAML,KAAKd,MAAMhB,EAAjB,MAAuB8B,KAAKd,MAAMf,EAAlC,UAEF,uBAAMoC,SAAUP,KAAKb,mBAArB,UACE,oDACE,uBAAOqB,KAAK,OAAOC,UAAU,KAAKX,KAAK,WAAUG,MAAOD,KAAKd,MAAML,SAAU6B,SAAUV,KAAKX,kBAE5F,uBACA,kDACA,uBAAOmB,KAAK,SAASG,IAAI,IAAIb,KAAK,SAASG,MAAOD,KAAKd,MAAMd,OAAQsC,SAAUV,KAAKX,kBAEpF,uBACA,uBAAOmB,KAAK,SAASP,MAAM,cAE/B,6BAAKD,KAAKd,MAAMoB,iB,GAlFWM,IAAMC,WCSxBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.46a7effa.chunk.js","sourcesContent":["class ApiClient {\r\n  static SERVER_URL = 'http://localhost:8080';\r\n  static GET_CHALLENGE = '/challenges/random';\r\n  static POST_RESULT = '/attempts';\r\n\r\n  static challenge(): Promise<Response> {\r\n    return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\r\n  }\r\n\r\n  static sendAnswer(user: string, a: number, b:number, answer: number): Promise <Response> {\r\n    console.log(user);\r\n    console.log(answer);\r\n    return fetch (ApiClient.SERVER_URL + ApiClient.POST_RESULT, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }, body: JSON.stringify(\r\n            {\r\n              username: user,\r\n              factor_a: a,\r\n              factor_b: b,\r\n              answer: answer\r\n            }\r\n          )\r\n    });\r\n  }\r\n}\r\n\r\nexport default ApiClient;\r\n","import React from 'react';\r\nimport ApiClient from './ApiClient.js';\r\n\r\nclass ChallengeComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      a:'',\r\n      b:'',\r\n      username: '',\r\n      answer: 0\r\n    };\r\n    this.handleSubmitResult = this.handleSubmitResult.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    ApiClient.challenge().then(\r\n      res => {\r\n        if(res.ok) {\r\n          res.json().then(json =>{\r\n            this.setState({\r\n              a: json.factor_a,\r\n              b: json.factor_b\r\n            });\r\n          });\r\n        } else {\r\n          this.updateMessage(\"Can't reach the server\");\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n\r\nhandleChange(e) {\r\n  const name = e.target.name;\r\n  this.setState({\r\n    [name]: e.target.value\r\n  });\r\n}\r\n\r\nhandleSubmitResult(e) {\r\n  e.preventDefault();\r\n  ApiClient.sendAnswer(this.state.username, this.state.a, this.state.b, this.state.answer)\r\n    .then(res => {\r\n\r\n      if (res.ok) {\r\n        res.json().then(json => {\r\n          if (json.correct) {\r\n            this.updateMessage(`Check out the big brain on ${this.state.username}! Your answer is Correct!`);\r\n\r\n          } else {\r\n            this.updateMessage(\"Sorry! That's inncorect. Try again.\");\r\n          }\r\n        });\r\n      } else {\r\n        this.updateMessage(\"Error: server error or not available\");\r\n      }\r\n    });\r\n}\r\n\r\nupdateMessage(m: string) {\r\n  this.setState({\r\n    message: m\r\n  });\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h3>Your new challenge is</h3>\r\n        <h1> {this.state.a} x {this.state.b} </h1>\r\n      </div>\r\n      <form onSubmit={this.handleSubmitResult}>\r\n        <label> Your username:\r\n          <input type=\"text\" maxLength=\"12\" name=\"username\"value={this.state.username} onChange={this.handleChange}/>\r\n          </label>\r\n          <br/>\r\n          <label> Your answer:\r\n          <input type=\"number\" min=\"0\" name=\"answer\" value={this.state.answer} onChange={this.handleChange}/>\r\n          </label>\r\n          <br/>\r\n          <input type=\"submit\" value=\"Submit\"/>\r\n      </form>\r\n      <h4>{this.state.message}</h4>\r\n    </div>\r\n  )\r\n}\r\n\r\n}\r\nexport default ChallengeComponent;\r\n","import React from 'react';\nimport './App.css';\nimport ChallengeComponent from './ChallengeComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChallengeComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}